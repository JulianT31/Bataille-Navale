@startuml

title Diagramme de classe detaill√© Bataille Navale \n

    namespace equipe {
      class equipe.EqBataillon {
          + EqBataillon()
          + EqBataillon()
      }
    }


    namespace equipe {
      class equipe.EqPecheur {
          + EqPecheur()
          + EqPecheur()
      }    }


    namespace equipe {
      abstract class equipe.Equipe {
          # ident : int
          # listeNavire : Vector<Navire>
          - rd : Random
          - sc : Scanner
          + Equipe()
          + addNavire()
          + getCommande()
          + getId()
          + getListeNavire()
          + getNature()
          + getStatut()
          + interrogationParClavier()
          + isPerdu()
          + setStatut()
          + tirageAleatoire()
          + toString()
          + verifSaisie()
      }
    }


  equipe.EqBataillon -up-|> equipe.Equipe
  equipe.EqPecheur -up-|> equipe.Equipe
  equipe.Equipe .up.|> joueur.Humain
  equipe.Equipe .up.|> joueur.Ia
  equipe.Equipe o-- tools.Couleur : couleur
  equipe.Equipe o-- manager.Commande : myCommande
  equipe.Equipe o-- tools.Nature : myNature
  equipe.Equipe o-- tools.Statut : myStatut

      namespace exceptions {
        class exceptions.JeuException {
            + JeuException()
        }
      }


      namespace exceptions {
        class exceptions.OccupException {
            + OccupException()
            + OccupException()
        }
      }

        namespace joueur {
          interface joueur.Humain {
              {abstract} + interrogationParClavier()
          }
        }



        namespace joueur {
          interface joueur.Ia {
              {abstract} + tirageAleatoire()
          }
        }



        namespace joueur {
          interface joueur.Joueur {
              {abstract} + addNavire()
              {abstract} + getCommande()
              {abstract} + getId()
              {abstract} + getListeNavire()
              {abstract} + getNature()
              {abstract} + getStatut()
              {abstract} + isPerdu()
          }
        }

    joueur.Humain -up-|> joueur.Joueur
    joueur.Ia -up-|> joueur.Joueur

        namespace manager {
          class manager.Commande {
              - idNavire : int
              + Commande()
              + Commande()
              + getActionChoisie()
              + getDirectionChoisie()
              + getEquipe()
              + getIdNavire()
              + toString()
          }
        }


        namespace manager {
          class manager.Jeu {
              # joueurs : ArrayList<Joueur>
              # taille : int
              - NBR_JOUEUR : int
              - nbTour : int
              - random : Random
              - scanner : Scanner
              + Jeu()
              + affichageJoueurs()
              + affichageMenu()
              + attributionNavire()
              + creationJoueur()
              + finDePartie()
              + generateNewPosition()
              + isGagne()
              + isValidPosition()
              + jouer()
              + majJeuAvCommande()
              + majJeuCasDeplacement()
              + majJeuCasPeche()
              + majJeuCasTir()
              + majListeNavire()
              + positionnementNavire()
          }
        }


      manager.Commande o-- tools.Action : actionChoisie
      manager.Commande o-- tools.Direction : directionChoisie
      manager.Commande o-- equipe.Equipe : equipe
      manager.Jeu o-- plateau.Plateau : plateau


         namespace navire {
            class navire.Chalutier {
                - filetDeploye : boolean
                + Chalutier()
                + isFiletDeploye()
                + resetFilet()
                + setFilet()
            }
          }


          namespace navire {
            class navire.Destroyer {
                + Destroyer()
            }
          }


          namespace navire {
            abstract class navire.Navire {
                # etat : int
                # id : int
                # numEq : int
                # portee : int
                # position : Point
                # strAffichage : String
                + Navire()
                + affichagePlateau()
                + getId()
                + getMyType()
                + getNumEq()
                + getPortee()
                + getPosition()
                + setCoule()
                + setPosition()
                + toString()
            }
          }

          namespace navire {
            abstract class navire.NavireProfondeur {
                + NavireProfondeur()
            }
          }

          namespace navire {
            abstract class navire.NavireSurface {
                + NavireSurface()
            }
          }


          namespace navire {
            class navire.SousMarin {
                # endommage : boolean
                + SousMarin()
                + isEndommage()
                + setEndommage()
            }
          }


        navire.Chalutier -up-|> navire.NavireSurface
        navire.Destroyer -up-|> navire.NavireSurface
        navire.Navire o-- tools.TypeNav : myType
        navire.NavireProfondeur -up-|> navire.Navire
        navire.NavireSurface -up-|> navire.Navire
        navire.SousMarin -up-|> navire.NavireProfondeur

            namespace plateau {
              class plateau.CasePlateau {
                  - estOccupeeProfondeur : boolean
                  - estOccupeeSurface : boolean
                  + CasePlateau()
                  + addUnOccupant()
                  + affiche()
                  + getOccupantProfondeur()
                  + getOccupantSurface()
                  + isEstOccupeeProfondeur()
                  + isEstOccupeeSurface()
                  + removeUnOccupant()
              }
            }


            namespace plateau {
              class plateau.Plateau {
                  - matricePlateau : CasePlateau[][]
                  - taille : int
                  + Plateau()
                  + affiche()
                  + getCasePlateau()
                  + getMyTaille()
              }
            }


          plateau.CasePlateau o-- navire.Navire : occupant
          plateau.CasePlateau o-- navire.NavireProfondeur : sousmarin

             namespace tools {
                enum Action {
                  DEPLACEMENT
                  PECHE
                  TIR
                }
              }


              namespace tools {
                enum Couleur {
                  ANSI_BLACK
                  ANSI_BLUE
                  ANSI_BRIGHT_BLACK
                  ANSI_BRIGHT_BLUE
                  ANSI_BRIGHT_CYAN
                  ANSI_BRIGHT_GREEN
                  ANSI_BRIGHT_MAGENTA
                  ANSI_BRIGHT_RED
                  ANSI_BRIGHT_WHITE
                  ANSI_BRIGHT_YELLOW
                  ANSI_CYAN
                  ANSI_GREEN
                  ANSI_PURPLE
                  ANSI_RED
                  ANSI_RESET
                  ANSI_WHITE
                  ANSI_YELLOW
                  value
                }
              }


              namespace tools {
                enum Direction {
                  EST
                  NORD
                  OUEST
                  SUD
                }
              }


              namespace tools {
                enum Nature {
                  HUMAIN
                  IA
                }
              }


              namespace tools {
                enum Statut {
                  MILITAIRE
                  NEUTRE
                }
              }


              namespace tools {
                class tools.ToolCouleur {
                    {static} + printCouleur()
                    {static} + printCouleur()
                }
              }


              namespace tools {
                enum TypeNav {
                  CHALUTIER
                  DESTROYER
                  SOUSMARIN
                }
              }

right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
